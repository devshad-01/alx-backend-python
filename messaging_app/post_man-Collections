{
	"info": {
		"_postman_id": "messaging-app-api-tests",
		"name": "Messaging App API Tests",
		"description": "Complete API testing collection for the Django messaging app with JWT authentication, conversations, messages, pagination, and filtering.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "messaging-app"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data and tokens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData).to.have.property('access');",
									"    pm.expect(jsonData).to.have.property('refresh');",
									"    ",
									"    // Store tokens for later use",
									"    pm.environment.set(\"access_token\", jsonData.access);",
									"    pm.environment.set(\"refresh_token\", jsonData.refresh);",
									"    pm.environment.set(\"user_id\", jsonData.user.user_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser1\",\n    \"email\": \"testuser1@example.com\",\n    \"password\": \"securepassword123\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"register",
								""
							]
						}
					}
				},
				{
					"name": "Register Second User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data and tokens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData).to.have.property('access');",
									"    pm.expect(jsonData).to.have.property('refresh');",
									"    ",
									"    // Store second user data",
									"    pm.environment.set(\"user2_id\", jsonData.user.user_id);",
									"    pm.environment.set(\"user2_access_token\", jsonData.access);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser2\",\n    \"email\": \"testuser2@example.com\",\n    \"password\": \"securepassword123\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User2\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"register",
								""
							]
						}
					}
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Login successful with tokens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access');",
									"    pm.expect(jsonData).to.have.property('refresh');",
									"    pm.expect(jsonData.message).to.eql('Login successful');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser1\",\n    \"password\": \"securepassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login",
								""
							]
						}
					}
				},
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile data returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('username');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/profile/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile",
								""
							]
						}
					}
				},
				{
					"name": "Unauthorized Access Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 for unauthorized access\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Authentication error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.detail).to.include('Authentication credentials were not provided');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/conversations/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "Conversations",
			"item": [
				{
					"name": "Create Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Conversation created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('conversation_id');",
									"    pm.expect(jsonData).to.have.property('participants');",
									"    ",
									"    // Store conversation ID for later use",
									"    pm.environment.set(\"conversation_id\", jsonData.conversation_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"participants\": [\"{{user_id}}\", \"{{user2_id}}\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/conversations/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								""
							]
						}
					}
				},
				{
					"name": "List Conversations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Conversations list returned with pagination\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('next');",
									"    pm.expect(jsonData).to.have.property('previous');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/conversations/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								""
							]
						}
					}
				},
				{
					"name": "Get Conversation Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Conversation details returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('conversation_id');",
									"    pm.expect(jsonData).to.have.property('participants');",
									"    pm.expect(jsonData).to.have.property('messages');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/conversations/{{conversation_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								"{{conversation_id}}",
								""
							]
						}
					}
				},
				{
					"name": "Add Participant to Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Participant added successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('added to conversation');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": \"{{user2_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/conversations/{{conversation_id}}/add_participant/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								"{{conversation_id}}",
								"add_participant",
								""
							]
						}
					}
				},
				{
					"name": "Unauthorized Conversation Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 or 404 for unauthorized access\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403, 404]);",
									"});",
									"",
									"pm.test(\"Access denied message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user2_access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/conversations/{{conversation_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"conversations",
								"{{conversation_id}}",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "Messages",
			"item": [
				{
					"name": "Send Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Message created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message_id');",
									"    pm.expect(jsonData).to.have.property('message_body');",
									"    pm.expect(jsonData).to.have.property('sender');",
									"    pm.expect(jsonData).to.have.property('conversation');",
									"    ",
									"    // Store message ID for later use",
									"    pm.environment.set(\"message_id\", jsonData.message_id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conversation\": \"{{conversation_id}}\",\n    \"message_body\": \"Hello! This is a test message from Postman.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							]
						}
					}
				},
				{
					"name": "Send Multiple Messages",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Create multiple messages for pagination testing",
									"pm.environment.set(\"message_counter\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Send multiple messages in sequence",
									"var counter = pm.environment.get(\"message_counter\");",
									"if (counter < 25) {",
									"    pm.environment.set(\"message_counter\", counter + 1);",
									"    postman.setNextRequest(\"Send Multiple Messages\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conversation\": \"{{conversation_id}}\",\n    \"message_body\": \"Test message #{{message_counter}} for pagination testing\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							]
						}
					}
				},
				{
					"name": "List Messages (Paginated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messages pagination works (20 per page)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData).to.have.property('count');",
									"    pm.expect(jsonData).to.have.property('next');",
									"    pm.expect(jsonData).to.have.property('previous');",
									"    pm.expect(jsonData).to.have.property('page_size');",
									"    pm.expect(jsonData.page_size).to.eql(20);",
									"    pm.expect(jsonData.results.length).to.be.at.most(20);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							]
						}
					}
				},
				{
					"name": "Filter Messages by Conversation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messages filtered by conversation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    ",
									"    // Check that all messages belong to the specified conversation",
									"    jsonData.results.forEach(function(message) {",
									"        pm.expect(message.conversation).to.eql(pm.environment.get(\"conversation_id\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?conversation={{conversation_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "conversation",
									"value": "{{conversation_id}}"
								}
							]
						}
					}
				},
				{
					"name": "Filter Messages by Date Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messages filtered by date range\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    ",
									"    // Check that messages are within the date range",
									"    var today = new Date().toISOString().split('T')[0];",
									"    jsonData.results.forEach(function(message) {",
									"        var messageDate = new Date(message.timestamp).toISOString().split('T')[0];",
									"        pm.expect(messageDate).to.eql(today);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set today's date for filtering",
									"var today = new Date().toISOString().split('T')[0];",
									"pm.environment.set(\"today_date\", today);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?date_from={{today_date}}&date_to={{today_date}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "date_from",
									"value": "{{today_date}}"
								},
								{
									"key": "date_to",
									"value": "{{today_date}}"
								}
							]
						}
					}
				},
				{
					"name": "Filter Messages by Sender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messages filtered by sender\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    ",
									"    // Check that all messages are from the specified sender",
									"    jsonData.results.forEach(function(message) {",
									"        pm.expect(message.sender.user_id).to.eql(pm.environment.get(\"user_id\"));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?sender={{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "sender",
									"value": "{{user_id}}"
								}
							]
						}
					}
				},
				{
					"name": "Search Messages by Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messages filtered by content search\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    ",
									"    // Check that messages contain the search term",
									"    jsonData.results.forEach(function(message) {",
									"        pm.expect(message.message_body.toLowerCase()).to.include('test');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?message_body=test",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "message_body",
									"value": "test"
								}
							]
						}
					}
				},
				{
					"name": "Update Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Message updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message_body).to.include('Updated');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message_body\": \"Updated message content from Postman\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/messages/{{message_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								"{{message_id}}",
								""
							]
						}
					}
				},
				{
					"name": "Mark Message as Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Message marked as read\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('marked as read');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/{{message_id}}/mark_as_read/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								"{{message_id}}",
								"mark_as_read",
								""
							]
						}
					}
				},
				{
					"name": "Unauthorized Message Access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 for unauthorized message access\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Access denied for non-participant\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user2_access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message_body\": \"Unauthorized update attempt\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/messages/{{message_id}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								"{{message_id}}",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "Advanced Features",
			"item": [
				{
					"name": "Test Pagination - Page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Second page pagination works\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('current_page');",
									"    pm.expect(jsonData.current_page).to.eql(2);",
									"    pm.expect(jsonData).to.have.property('previous');",
									"    pm.expect(jsonData.previous).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?page=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					}
				},
				{
					"name": "Test Custom Page Size",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Custom page size works\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.page_size).to.eql(10);",
									"    pm.expect(jsonData.results.length).to.be.at.most(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?page_size=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "page_size",
									"value": "10"
								}
							]
						}
					}
				},
				{
					"name": "Combined Filters Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Multiple filters work together\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    ",
									"    // Verify combined filtering works",
									"    jsonData.results.forEach(function(message) {",
									"        pm.expect(message.conversation).to.eql(pm.environment.get(\"conversation_id\"));",
									"        pm.expect(message.message_body.toLowerCase()).to.include('test');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/messages/?conversation={{conversation_id}}&message_body=test&ordering=-timestamp",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"messages",
								""
							],
							"query": [
								{
									"key": "conversation",
									"value": "{{conversation_id}}"
								},
								{
									"key": "message_body",
									"value": "test"
								},
								{
									"key": "ordering",
									"value": "-timestamp"
								}
							]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "global-prerequest",
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Running request: ' + pm.info.requestName);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "global-test",
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has proper headers', function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000",
			"type": "string"
		}
	]
}
